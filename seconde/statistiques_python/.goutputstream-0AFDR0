%%AMC:preprocess_command=/home/luc/Projets-QCM/211/S1_Stat/prePythonTex4AMC
%%AMC:jobspecific=1
%%AMC:latex_engine=pdflatex --shell-escape

% Compilation Texmaker : Utilisateur/Commandes utilisateur
%--------------------------
% Shell Python :
% pdflatex --shell-escape -synctex=1 -interaction=nonstopmode %.tex|
% python /usr/share/texlive/texmf-dist/scripts/pythontex/pythontex.py %.tex|
% pdflatex --shell-escape -synctex=1 -interaction=nonstopmode %.tex|
%------------------------
% Copier-coller la ligne ci-dessous dans Utilisateur/Commandes Utilisateur/Editer Commandes Utilisateur
%------------------------
% pdflatex --shell-escape -synctex=1 -interaction=nonstopmode %.tex | python /usr/share/texlive/texmf-dist/scripts/pythontex/pythontex.py %.tex | pdflatex --shell-escape -synctex=1 -interaction=nonstopmode %.tex
%--------------------------

\documentclass[a4paper]{article}
\RequirePackage{etex}
\usepackage[utf8]{inputenc}    
\usepackage[T1]{fontenc}
\usepackage[french]{babel}
\selectlanguage{french}
\usepackage[francais,bloc,completemulti,ensemble]{automultiplechoice}    
\usepackage{fancyhdr,amssymb,amsmath}
\usepackage{multicol}
\usepackage{minted}

\usepackage[onelanguage,french,linesnumbered,ruled]{algorithm2e}

% ---------- Utilisation de codes Python -----
\usepackage{pythontex}
\usepackage{csvsimple}

%----------------------------------------------
\def\barO{b=1.25,m=O}
\def\barQ{b=1,m=-0.1}
\def\barS{b=1,m=0}
\def\barP{b=1.5,m=-0.1}
\def\barR{b=2,m=-0.1}

\begin{pythontexcustomcode}[begin]{pylab}
# Might want sys.path.insert(1, '../src/') in some cases
# But then it would probably be better to use virtualenv
sys.path.append('../')
from python_preamble import *
\end{pythontexcustomcode}

\begin{pycode}
import numpy as np
import math
from fractions import Fraction as F
from sympy import *
import random
from faker import Factory

np.random.seed(12345)
# IMPORTANT : Graine pour la fonction random


def polyv2(b,p,d,q) :
	x=Symbol('x')
	myp = expand((x-b)**p*(x-d)**q)
	return latex(myp)
	
def dp1x(a,b,c) :
    x=Symbol('x')
    y=Symbol('y')
    f=(a*y-1)/(b*x-1)**c

    g=diff(f,x,1)
    g2=g/b
    g3=g*(-1)
    g4=g2*(-1)

	 
    gl = latex(g)
    g2l = latex(g2)
    g3l = latex(g3)
    g4l = latex(g4)

    return np.array([gl,g2l,g3l,g4l])

def fonction(a,x1,x2) :
    x=Symbol('x')
    f=a*x*x-a*(x1+x2)*x+a*x1*x2
    fl=latex(f)
    d=np.random.randint(2,5)
    y=-a*(x1+x2)*x+a*(x1*x2+d**2)
    yl=latex(y)
    yi=a*(d**2+x1*x2-(x1+x2)*d)
    yib=a*(d**2+x1*x2+(x1+x2)*d)
    return np.array([fl,yl,d,yi,yib])

def canonique(a,b,c) :
    x=Symbol('x')
    delta=b*b-4*a*c
    xs=F(-b,2*a)
    ys=F(-delta,4*a)
    f=a*(x-xs)**2+ys
    fl = latex(f)
    f2=a*(x+xs)**2+ys
    f2l = latex(f2)
    f3=a*(x-xs)**2-ys
    f3l = latex(f3)
    f4=a*(x+xs)**2-ys
    f4l = latex(f4)
    return np.array([fl,f2l,f3l,f4l])

def sommet(a,b,c) :
    delta=b*b-4*a*c
    xs=F(b+c,2)
    ys=F(a*(xs-b)*(xs-c),1)
    return np.array([xs,ys])

def factor(b,c) :
    x=Symbol('x')
    ff=(x-b)*(x-c)
    ffl = latex(ff)
    ff2=(x-b)*(x+c)
    ff2l=latex(ff2)
    ff3=(x+b)*(x-c)
    ff3l=latex(ff3)
    ff4=(x+b)*(x+c)
    ff4l=latex(ff4)
    return np.array([ffl,ff2l,ff3l,ff4l])

def coeff() :
    pair=[2,4,6,8,10]
    impair=[1,3,5,7,9]
    a=np.random.randint(-7,7)
    while a == 0:
        a=np.random.randint(-7,7)
    x1=np.random.randint(-10,-2)
    if (x1&1) :
        x2=np.random.choice(impair) 
    else :
        x2=np.random.choice(pair)
    if x2==-x1:
        x2=x2+2
    if -x1 > x2:
        x3=x2
        x4=-x1
    else:
        x3=-x1
        x4=x2
    return np.array([a,x1,x2,x3,x4])

def image(a,b,c,x) :
    return a*x*x+b*x+c

def signe(a):
    if a > 0:
        return ("positif","negatif")
    return ("negatif","positif")

def position(a):
    if a > 0:
        return ("au-dessous","au-dessus")
    return ("au-dessus","au-dessous")

def algosuite(u0,r,q,n):
    u=u0
    for i in range(1,n+1):
        u=q*u
        u=u+r
    return u

def suitearith(a0,r,q):
    aq=a0
    for i in range(1,q+1):
        aq=r+aq
    return aq

def suitegeo(a0,r,q):
    aq=a0
    for i in range(1,q+1):
        aq=r*aq
    return aq

def sommegeo(q,n):
    return round((1-q**n)/(1-q),2)

def sommearith(u0,r,n):
    return round((u0+suitearith(u0,r,n))/2,2)

def limit(a,b,q):
    if q<1:
       return [a,0,"-\infty","+\infty"]
    else:
        if b > 0:
            return ["+\infty",a,0,"-\infty"]
    return ["-\infty",a,0,"+\infty"]

def rand_list():
	 a=np.random.randint(7,9)
	 list = []
	 for i in range(a):
	 	list.append(np.random.randint(0,41))
	 return list

def rand_list2(taille):
	 
	 list = []
	 for i in range(taille):
	    n=np.random.randint(0,41)
	    while ( n in list ):
	        n=np.random.randint(0,41)
	    list.append(n)
	 return list

def mediane(liste):
	liste.sort()
	if len(liste) == 8 :
		m=((liste[(len(liste)-1)//2]+liste[len(liste)//2])/2)
		f1=m-1
		f2=m+1
	else :
		m=liste[len(liste)//2]
		f1=m-1
		f2=m+1
	return [m,f1,f2]
	
def quartiles(liste):
    liste.sort()
    if len(liste)==8:
        Q1 = liste[1]
        Q1f = liste[2]
        Q3 = liste[5]
        Q3f = liste [6]
    else:
        Q1 = liste[1]
        Q1f = liste[2]
        Q3 = liste[5]
        Q3f = liste[6]
    return [Q1,Q3,Q1f,Q3f]

def printtab():
    lo, hi = 1,6
    print(r"\begin{tabular}{c|c}")
    print(r"$m$ & $2^m$ \\ \hline")
    for m in range (lo, hi+1):
        print(r"%d & %d \\" % (m, 2**m))
    print(r"\end{tabular}")

def melange(liste):
    listem=random.sample(liste,len(liste))
    return listem
    
def printliste(liste):
    for i in range(len(liste)):
        print(liste[i])
        if i != len(liste)-1:
            print(", ")


def prenom():
    fake = Factory.create('fr_FR')
    fake.name() # 'Laetitia Roger'
    fake.name() #'Victoire de la Cohen'
    prenom=fake.first_name() # 'Jeannine'
    fake.first_name() # 'Christophe'
    fake.first_name_female() # 'Alexandrie'
    fake.first_name_male() # 'Rémy'
    fake.address() # 'chemin Catherine Legendre\n33959 LerouxBourg'
    fake.department_name() # 'Tarn'
    
    fake2 = Factory.create('fr_FR')
    prenom2=fake2.first_name()
    while prenom == prenom2:
        fake2 = Factory.create('fr_FR')
        prenom2=fake2.first_name()
    return [prenom,prenom2]


def print_prenom(prenom):
    print(prenom)

def regulier(sd1,sd2):
    if sd1 < sd2:
        return 0
    else:
        if sd1 > sd2:
            return 1
        else:
            return 2

def stat(liste):
    M=round(np.mean(liste),2)
    m=round(np.median(liste),2)
    Q1=np.percentile(liste,25)
    Q3=np.percentile(liste,75)
    sd=round(np.std(liste),2)
    return [M,m,Q1,Q3,sd]
    
\end{pycode}

\def\AMCformQuestion#1{{\sc Question #1 :}}


\element{stat}{

\multicolumn{•}{•}{•}
}

\element{statistiques}{

\pyc{r=np.random.randint(2,7)}
\pyc{a0=np.random.randint(2,7)}
\pyc{t=np.random.randint(10,24)}
\pyc{atm1=suitearith(a0,r,t-1)}

\pyc{taille=np.random.randint(7,9)}
\pyc{listeA=rand_list2(taille)}
\pyc{listeB=rand_list2(taille)}
\pyc{melangeA=melange(listeA)}
\pyc{melangeB=melange(listeB)}
\pyc{prenoms=prenom()}
\pyc{eleve=prenoms[0]}
\pyc{eleve2=prenoms[1]}

\pyc{print_prenom(eleve)}et \pyc{print_prenom(eleve2)}partent en voyage à l'étranger au durant \py{taille} jours, et souhaitent parler avec le plus de monde possible tous les jours afin d'améliorer leur pratique de la langue locale.

\vspace{1mm}

Voici le nombre de personnes avec lesquelles \pyc{print_prenom(eleve)}a parlé chaque jour:
\pyc{printliste(melangeA)}.

\pyc{statA=stat(listeA)}
\pyc{statB=stat(listeB)}
\pyc{M=round(statA[0],2)}
\pyc{m=statA[1]}
\pyc{f1=mediane(listeA)[1]}
\pyc{f2=mediane(listeA)[2]}

\pyc{Q1np=statA[2]}
%\pyc{Q1=listeA[Q1r]}
\pyc{Q=quartiles(listeA)}
\pyc{Q1=Q[0]}

\pyc{Q3np=statA[3]}
%pyc{Q3=listeA[Q3r]}
\pyc{Q3=Q[1]}
\pyc{sd=statA[4]}
\pyc{sdB=statB[4]}

\pyc{regular=regulier(sd,sdB)}

\pyc{Q1f=Q[2]}
\pyc{Q3f=Q[3]}
%\pyc{print(listeA," avec NP: moyenne =",M,"; mediane = ",m,"; Q1 =",Q1,"; Q3 =",Q3,"; EcartType =",sd)}
%\pyc{print("version np: Q1=", Q1np," et Q3=",Q3np)}

%\begin{center}
%\pyc{printtab()}
%\end{center}
\vspace{1mm}
\begin{questionmult}{moyenne}\bareme{formula=NBC*2-(0.1*NMC),p=0,MAX=2}
\AMCnoCompleteMulti
Quelle est le nombre moyen M de personnes avec lesquelles \pyc{print_prenom(eleve)}a parlé chaque jour? Que peut-on dire de la moyenne ?
\begin{multicols}{2}\AMCBoxedAnswers
			\begin{reponses}
				\mauvaise{$M=\py{M+1}$}
				\mauvaise{$M=\py{round(M-1,2)}$}
				\bonne{$M=\py{M}$}
				\bonne{C'est une caractéristique de position}
				\mauvaise{C'est une caractéristique de dispersion}
			\end{reponses}
\end{multicols}
\end{questionmult}

\begin{questionmult}{mediane}\bareme{formula=NBC*2-(0.1*NMC),p=0,MAX=2}
\AMCnoCompleteMulti
Combien vaut la médiane m? Que peut-on dire de la mediane?
\begin{multicols}{2}\AMCBoxedAnswers
			\begin{reponses}
				\mauvaise{$m=\py{f1}$}
				\mauvaise{$m=\py{f2}$}
				\bonne{$m=\py{m}$}
				\bonne{C'est une caractéristique de position}
				\mauvaise{C'est une caractéristique de dispersion}
			\end{reponses}
\end{multicols}
\end{questionmult}

\begin{questionmult}{vraifaux}\bareme{formula=NBC*2-(0.1*NMC),p=0,MAX=2}
\AMCnoCompleteMulti
Quelle(s) affirmation(s) sont vraies ?
\AMCBoxedAnswers
			\begin{reponses}
				\bonne{L'étendue est une caractéristique de dispersion.}
				\mauvaise{La médiane est une caractéristique de position et la moyenne est une caractéristique de dispersion.}
				\mauvaise{La moyenne est une caractéristique de position et la médiane est une caractéristique de dispersion.}
				\bonne{L'écart-inter quartile est une caractéristique de dispersion.}
				\mauvaise{L'écart-inter quartile est une caractéristique de position.}
			\end{reponses}
\end{questionmult}

\begin{questionmult}{quartiles}\bareme{formula=NBC*2-(0.1*NMC),p=0,MAX=2}
\AMCnoCompleteMulti
Que peut-on dire des quartiles Q1 et Q3 ?
\begin{multicols}{2}\AMCBoxedAnswers
			\begin{reponses}
			    \mauvaise{$Q1=\py{listeA[0]}$ et $Q3=\py{listeA[2]}$}
				\bonne{$Q1=\py{Q1}$ et $Q3=\py{Q3}$}
				\mauvaise{$Q1=\py{Q1f}$ et $Q3=\py{Q3f}$}
				\mauvaise{$Q1=\py{melangeA[1]}$ et $Q3=\py{melangeA[5]}$}
				\bonne{Ce sont des caractéristiques de position.}
				\mauvaise{Ce sont des caractéristiques de dispersion.}
				\bonne{Au moins la moitié des valeurs de la série se situent entre Q1 et Q3.}
			\end{reponses}
\end{multicols}
\end{questionmult}

\begin{questionmult}{ecarttype}\bareme{formula=NBC*2-(0.1*NMC),p=0,MAX=2}
\AMCnoCompleteMulti
Qu'en est-il de l'écart type?
\begin{multicols}{2}\AMCBoxedAnswers
			\begin{reponses}
				\bonne{$\sigma=\py{sd}$}
				\mauvaise{$\sigma=\py{round(sd**2,2)}$}
				\bonne{C'est une caractéristique de dispersion.}
				\mauvaise{C'est une caractéristique de position.}
				\bonne{C'est la racine carré de la Variance, $\sigma=\sqrt{V}$}
				\mauvaise{La Variance est la racine carée de l'écart-type: $V=\sqrt{\sigma}$}
			\end{reponses}
\end{multicols}
\end{questionmult}
}

\element{stat2}{
\vspace{1mm}
Voici le nombre de personnes qui ont parlé avec \pyc{print_prenom(eleve2)}: \pyc{printliste(melangeB)}.
\vspace{1mm}
\begin{questionmult}{Alain}\bareme{formula=NBC*2-(0.1*NMC),p=0,MAX=2}
\AMCnoCompleteMulti
Qui de \pyc{print_prenom(eleve)}ou de \pyc{print_prenom(eleve2)}a fait preuve d'une plus grande régularité durant le séjour?
\AMCBoxedAnswers
			\begin{reponses}
				\bonne{\py{prenoms[regular]} a fait preuve de plus de régularité que \py{prenoms[1-regular]}}
				\mauvaise{\py{prenoms[1-regular]} a fait preuve de plus de régularité que \py{prenoms[regular]}}
				\mauvaise{\py{prenoms[1-regular]} et \py{prenoms[regular]} ont eu la même régularité!}
				\mauvaise{On ne peut pas savoir!}
			\end{reponses}
\end{questionmult}

\begin{question}{caracteristique}\bareme{\barQ}
Quelle caractéristique de la série de valeur peut permettre de répondre à la question précédente?
\AMCOpen{lines=2,dots=false,scan=true}{\wrongchoice[F]{f}\scoring{0}\wrongchoice[P]{p}\scoring{0.25}\correctchoice[J]{j}\scoring{0.5}}
\end{question}

}


\element{python}{


\pyc{tours=np.random.randint(4,7)}
\begin{questionmult}{instructionVF1}\bareme{formula=NBC*2-(0.1*NMC),p=0,MAX=2}
\AMCnoCompleteMulti
Quelles affirmations sont vraies?
\AMCBoxedAnswers
			\begin{reponses}
				\bonne{Il faut utiliser l'instruction \textit{input} afin de saisir des données dans le programme en python.}
				\mauvaise{Il faut utiliser l'instruction \textit{print} afin de saisir des données dans le programme en python.}
				\bonne{Une instruction de boucle en python peut-être "for j in range(\py{tours}):"}
				\mauvaise{Une instruction de boucle en python peut-être "for \py{tours} in range(i):"}
				\mauvaise{Une instruction de boucle en python peut-être "for i in rang(\py{tours}):"}
				\mauvaise{L'instruction }
			\end{reponses}

\end{questionmult}
}

\element{python}{
\pyc{tours=np.random.randint(4,7)}
\begin{questionmult}{instructionVF2}\bareme{formula=NBC*2-(0.1*NMC),p=0,MAX=2}
\AMCnoCompleteMulti
Quelles affirmations sont vraies?
\AMCBoxedAnswers
			\begin{reponses}
				\bonne{Pour faire une boucle de \py{tours} tours, on peut utiliser l'instruction suivante: "for i in range(\py{tours}):".}
				\mauvaise{Pour faire une boucle de \py{tours} tours, on peut utiliser l'instruction suivante: "for \py{tours} in range(i):".}
				\bonne{Pour faire une boucle de \py{tours} tours, on peut utiliser l'instruction suivante: "for i in range(1,\py{tours+1}):".}
                \mauvaise{Pour faire une boucle de \py{tours} tours, on peut utiliser l'instruction suivante: "for i in range(1,\py{tours}):".}
                \mauvaise{Pour faire une boucle de \py{tours} tours, on peut utiliser l'instruction suivante: "for \py{tours+1} in range(i):".}
			\end{reponses}
\end{questionmult}
}

\element{python}{
\pyc{tours=np.random.randint(4,7)}
\begin{questionmult}{instructionVF3}\bareme{formula=NBC*2-(0.1*NMC),p=0,MAX=2}
\AMCnoCompleteMulti
Quelles affirmations sont vraies?
\AMCBoxedAnswers
			\begin{reponses}
				\bonne{Pour faire une boucle de \py{tours} tours, on peut utiliser l'instruction suivante: "for i in range(\py{tours}):".}
				\bonne{Il faut faire attention à l'indentation quand on écrit un programme en Python.}
				\mauvaise{On peut écrire un programme Python en langage naturel.}
                \mauvaise{L'ordre des lignes d'un programme Python n'a jamais d'importance.}
                \mauvaise{On ne peut écrire un programme en Python que sur un ordinateur.}
			\end{reponses}

\end{questionmult}
}


\element{algo}{

\begin{question}{programme}\bareme{\barQ}
BONUS - Ecrire un programme en Python qui permette de calculer une moyenne.
\AMCOpen{lines=4,dots=false,scan=true}{\wrongchoice[F]{f}\scoring{0}\wrongchoice[P]{p}\scoring{0.25}\correctchoice[J]{j}\scoring{0.5}}
\end{question}

}




%--------
% DOCUMENT
%--------

\begin{document}
\setgroupmode{python}{withreplacement}
\newcommand{\sujet}{
\exemplaire{1}{
%\pyc{a=np.random.randint(2,7)} %

%\pyc{x1=np.random.randint(-6,-1)} %
 
%\pyc{x2=np.random.randint(2,8)} % 
\pyc{coefs=coeff()}
\pyc{a=coefs[0]}
\pyc{x1=coefs[1]}
\pyc{x2=coefs[2]}
\pyc{x3=coefs[3]}
\pyc{x4=coefs[4]}

\AMCassociation{\id}
%%% debut de l'en-tête des copies :

%%% fin de l'en-tête

\begin{center}
\hrule\vspace{2mm}
\bf\Large Partie I - Statistiques
\vspace{2mm}\hrule
\end{center}
\restituegroupe{statistiques}
\begin{center}
\hrule\vspace{2mm}
\end{center}
\clearpage
\restituegroupe{stat2}

\begin{center}
\hrule\vspace{2mm}
\bf\Large Partie II - Python
\vspace{2mm}\hrule
\end{center}


\pyc{print_prenom(eleve)}et \pyc{print_prenom(eleve2)}vont ecrire un programme en Python afin d'automatiser l'étude de leurs données pour le prochain voyage.

\vspace{5mm}

%\cleargroup{python2}
%\copygroup[2]{python}{python2}
\restituegroupe[2]{python}
\restituegroupe{algo}

\vspace{20mm}

\begin{center}
\includegraphics[scale=0.2]{../python.png} 
\end{center}


%\AMCcleardoublepage
\clearpage
\AMCdebutFormulaire

%%% début de l’en-tête de la feuille de réponses
\begin{minipage}{.4\linewidth}
\centering\large\bf Evaluation Mathématiques 2nde11\\Vendredi 18.09.2020 \end{minipage}
\champnom{\fbox{    
                \begin{minipage}{.5\linewidth}
                  \begin{center} \nom{} \prenom{} \end{center}
                \end{minipage}
         }}

\begin{center}
\bf Les réponses aux questions sont à donner exclusivement sur cette feuille : 
les réponses données de l'autre côté de la feuille ne seront pas prises en compte.
\\
Les questions avec un symbole  une unique bonne réponse. L'indiquer sur cette feuille en noircissant la case correspondante au stylo à bille noir.\\
Les réponses fausses retirent un quart des points. Une absence de réponse n'enlève pas de points.
Pour rectifier une erreur, utilisez un correcteur "blanc" pour faire disparaître complètement la case noircie par erreur.\\
\
\end{center}
\AMCboxStyle{shape=square,size=4.25ex,down=.4ex,rule=.5pt,outsidesep=.1em,color=black}
%%% fin de l’en-tête de la feuille de réponses
\formulaire

\AMCcleardoublepage

}
}
\csvreader[head to column names]{../211.csv}{}{\sujet}

\end{document}
